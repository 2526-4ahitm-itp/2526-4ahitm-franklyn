name: '‚ùÑÔ∏è Setup Nix with Caches'

on:
  workflow_call:
    inputs:
      environment:
        required: false
        type: string

runs:
  using: "composite"
  steps:
    - name: ‚ùÑÔ∏è Install Nix
      uses: DeterminateSystems/nix-installer-action@main

    - name: ‚ùÑÔ∏è Restore and save Nix store
      uses: nix-community/cache-nix-action@v6
      with:
        # restore and save a cache using this key
        primary-key: ${{ runner.os }}-nix-${{ hashFiles('**/*.nix', '**/flake.lock') }}
        # if there's no cache hit, restore a cache by this prefix
        restore-prefixes-first-match: ${{ runner.os }}-nix-
        # collect garbage until the Nix store size (in bytes) is at most this number
        # before trying to save a new cache
        # 1G = 1073741824
        gc-max-store-size-linux: 1G
        # do purge caches
        purge: true
        # purge all versions of the cache
        purge-prefixes: ${{ runner.os }}-nix-
        # created more than this number of seconds ago
        purge-created: 0
        # or, last accessed more than this number of seconds ago
        # relative to the start of the `Post Restore and save Nix store` phase
        purge-last-accessed: 0
        # except any version with the key that is the same as the `primary-key`
        purge-primary-key: never

    - name: ‚òï Setup Maven Cache
      uses: actions/cache@v4
      if: ${{ inputs.environment == 'server' || inputs.environment == '' }}
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('server/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: ü¶Ä Setup Rust Cache
      uses: actions/cache@v4
      if: ${{ inputs.environment == 'sentinel' || inputs.environment == '' }}
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          **/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('sentinel/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: ü¶¶ Setup Hugo Cache
      uses: actions/cache@v4
      if: ${{ inputs.environment == 'hugo' || inputs.environment == '' }}
      with:
        path: ${{ runner.temp }}/hugo_cache
        key: ${{ runner.os }}-hugo-${{ hashFiles('hugo/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-hugo-

    - name: üçû Setup Bun Cache
      uses: actions/cache@v4
      if: ${{ inputs.environment == 'proctor' || inputs.environment == '' }}
      with:
        path: |
          ~/.bun/install/cache
          **/node_modules
        key: ${{ runner.os }}-bun-${{ hashFiles('proctor/bun.lock') }}
        restore-keys: |
          ${{ runner.os }}-bun-